Description:
  This template deploys a QA env in existing VPC (provisioned in another template) includes autoscaling group,
  load balancer in 2 AZs.

Parameters:

  ApplicationName:
    Description: Name of your application
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  IsExistApplication:
    Description: Does your application exist?
    Default: true
    Type: String
    AllowedValues: 
      - true
      - false

  EnvironmentName:
    Description: Environment name - QA/UAT.
    Type: String
    MinLength: 1
    MaxLength: 255
    Default: QA
  
  NetworkStackName:
    Description: Name of an active CloudFormation stack of networking resources
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  # AppS3Bucket:
  #   Description: S3 Bucket containing your application package.
  #   Type: String
  #   MinLength: 1
  #   MaxLength: 255

  # AppS3Key:
  #   Description: S3 Bucket key for your application package
  #   Type: String
  #   MinLength: 1
  #   MaxLength: 255

  SSLCertificateArn:
    Description: The SSL/TLS certificate ARN
    Type: String
    MinLength: 0
    MaxLength: 2048
    Default: ""

  AutoScalingMinInstanceCount:
    Description: Minimum number of EC2 instances for Auto Scaling
    Type: Number
    MinValue: 1
    MaxValue: 4
    Default: 2
    ConstraintDescription: Specify a number between 1 - 4

  AutoScalingMaxInstanceCount:
    Description: Maximum number of EC2 instances for Auto Scaling
    Type: Number
    MinValue: 1
    MaxValue: 4
    Default: 4
    ConstraintDescription: Specify a number between 1 - 4

Conditions:
  CreateApplication: !Equals [ false, !Ref IsExistApplication]
  TlsEnabled: !Not [ !Equals [ !Ref SSLCertificateArn, "" ] ]


Resources:
  ElasticBeanstalkServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "elasticbeanstalk.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService

  Application:
    Type: AWS::ElasticBeanstalk::Application
    Condition: CreateApplication 
    Properties:
      ApplicationName: !Ref ApplicationName

  # ApplicationVersion:
  #   Type: AWS::ElasticBeanstalk::ApplicationVersion
  #   Properties:
  #     ApplicationName: !Ref ApplicationName
  #     SourceBundle:
  #       S3Bucket: !Ref AppS3Bucket
  #       S3Key: !Ref AppS3Key

  Environment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      EnvironmentName: !Sub "${ApplicationName}-${EnvironmentName}"
      ApplicationName: !Ref ApplicationName
      TemplateName: !Ref ConfigurationTemplate
      # VersionLabel: !Ref ApplicationVersion
    DependsOn:
      - ConfigurationTemplate
      # - ApplicationVersion

  # The configuration template contains environment parameters such as those
  # that relate to the autoscaling group (e.g. size, triggers), placement of
  # resources in the VPC, load balancer setup, and environment variables
  ConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref ApplicationName
      SolutionStackName: 64bit Windows Server 2016 v2.0.4 running IIS 10.0
      OptionSettings:
      - Namespace: aws:elasticbeanstalk:environment
        OptionName: EnvironmentType
        Value: LoadBalanced
      - Namespace: aws:elasticbeanstalk:environment
        OptionName: LoadBalancerType
        Value: application
      - Namespace: aws:elasticbeanstalk:environment
        OptionName: ServiceRole
        Value: !Ref ElasticBeanstalkServiceRole

        # AUTOSCALING OPTIONS
      - Namespace: aws:autoscaling:asg
        OptionName: MinSize
        Value: !Ref AutoScalingMinInstanceCount
      - Namespace: aws:autoscaling:asg
        OptionName: MaxSize
        Value: !Ref AutoScalingMaxInstanceCount
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: SecurityGroups
        Value:
          Fn::ImportValue: !Sub "${NetworkStackName}-AppSecurityGroupID"
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: InstanceType
        Value: m5.large
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile
        Value: !Ref AppInstanceProfile
      - Namespace: aws:autoscaling:trigger
        OptionName: MeasureName
        Value: CPUUtilization
      - Namespace: aws:autoscaling:trigger
        OptionName: Unit
        Value: Percent
      - Namespace: aws:autoscaling:trigger
        OptionName: UpperThreshold
        Value: 80
      - Namespace: aws:autoscaling:trigger
        OptionName: LowerThreshold
        Value: 60

        # VPC OPTIONS (PLACEMENT OF RESOURCES IN SUBNETS)
      - Namespace: aws:ec2:vpc
        OptionName: VPCId
        Value:
          Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"
      - Namespace: aws:ec2:vpc
        OptionName: Subnets
        Value:
          "Fn::Join":
          - ','
          - - !ImportValue
                "Fn::Sub": "${NetworkStackName}-PrivateSubnet1ID"
            - !ImportValue
                "Fn::Sub": "${NetworkStackName}-PrivateSubnet2ID"

      - Namespace: aws:ec2:vpc
        OptionName: ELBSubnets
        Value:
          "Fn::Join":
          - ','
          - - !ImportValue
                "Fn::Sub": "${NetworkStackName}-PublicSubnet1ID"
            - !ImportValue
                "Fn::Sub": "${NetworkStackName}-PublicSubnet2ID"

      - Namespace: aws:elbv2:listener:default
        OptionName: ListenerEnabled
        Value: !If [ TlsEnabled, false, true ]
      - Namespace: aws:elbv2:loadbalancer
        OptionName: SecurityGroups
        Value:
          Fn::ImportValue: !Sub "${NetworkStackName}-ELBSecurityGroupID"
      - Namespace: aws:elbv2:loadbalancer
        OptionName: ManagedSecurityGroup
        Value:
           Fn::ImportValue: !Sub "${NetworkStackName}-ELBSecurityGroupID"
      - Namespace: aws:elbv2:listenerrule:default
        OptionName: PathPatterns
        Value: "/*"
      - Namespace: !Sub
        - "aws:elbv2:listener:${ListenPort}"
        - ListenPort:
            "Fn::ImportValue": !Sub "${NetworkStackName}-ELBIngressPort"
        OptionName: Protocol
        Value: !If [ TlsEnabled, HTTPS, HTTP ]
      - Namespace: !Sub
        - "aws:elbv2:listener:${ListenPort}"
        - ListenPort:
            "Fn::ImportValue": !Sub "${NetworkStackName}-ELBIngressPort"
        OptionName: Rules
        Value: default
      - Namespace: !Sub
        - "aws:elbv2:listener:${ListenPort}"
        - ListenPort:
            "Fn::ImportValue": !Sub "${NetworkStackName}-ELBIngressPort"
        OptionName: SSLCertificateArns
        Value: !Ref SSLCertificateArn
        
        # Enable Cloudwatch Health
      - Namespace: aws:elasticbeanstalk:healthreporting:system
        OptionName: SystemType
        Value: enhanced

        # CLOUDWATCH LOGS
      - Namespace: aws:elasticbeanstalk:cloudwatch:logs
        OptionName: StreamLogs
        Value: 'true'

      - Namespace: aws:elasticbeanstalk:cloudwatch:logs
        OptionName: DeleteOnTerminate
        Value: 'true'

      - Namespace: aws:elasticbeanstalk:cloudwatch:logs
        OptionName: RetentionInDays
        Value: 180

      - Namespace: aws:elasticbeanstalk:cloudwatch:logs:health
        OptionName: HealthStreamingEnabled
        Value: 'true'

      - Namespace: aws:elasticbeanstalk:cloudwatch:logs:health
        OptionName: RetentionInDays
        Value: 180


      # ENVIRONMENT VARIABLES - COMMON TO ALL STACKS
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: AWS_REGION
        Value: !Ref AWS::Region

      # # ENVIRONMENT VARIABLES - NODE, RAILS - Move to parameter store
      # - Namespace: aws:elasticbeanstalk:application:environment
      #   OptionName: DB_PASSWORD
      #   Value: !Ref DatabasePassword

      # - Namespace: aws:elasticbeanstalk:application:environment
      #   OptionName: DB_USER
      #   Value:
      #     Fn::ImportValue: !Sub ${DatabaseStackName}-DatabaseUser

      # - Namespace: aws:elasticbeanstalk:application:environment
      #   OptionName: DB_NAME
      #   Value: !Ref DatabaseName

      # - Namespace: aws:elasticbeanstalk:application:environment
      #   OptionName: DB_HOST
      #   Value:
      #     Fn::ImportValue: !Sub "${DatabaseStackName}-DatabaseURL"

  # IAM resources
  AppRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  AppPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: App
      Roles:
      - !Ref AppRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action: "*"
            Resource: "*"

  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref AppRole

Outputs:

  Name:
    Description: Elastic Beanstalk Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-Name

  ApplicationName:
    Description: Application Name
    Condition: CreateApplication 
    Value: !Sub "${ApplicationName}"
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationName"

  EnvironmentName:
    Description: Environment Name
    Value: !Sub "${ApplicationName}-${EnvironmentName}"
    Export:
      Name: !Sub "${AWS::StackName}-EnvironmentName"

  EnvironmentURL:
    Description: Environment URL
    Value: !GetAtt Environment.EndpointURL
    Export:
      Name: !Sub "${AWS::StackName}-EnvironmentURL"
